 Overview
This React-based app fetches products from an API (https://dummyjson.com/products) and displays them in a paginated format. It uses Tailwind CSS for styling and useState and useEffect from React for state management and side effects.

üîß Core Features
1. Product Fetching
Fetches 10 products at a time using limit=10&skip=${pages * 10}.
Uses the DummyJSON API to retrieve product data.
Automatically refetches products when the active page (pages) changes.

2. Pagination
Dynamically calculates the total number of pages based on API response.
Supports navigation via:
Specific page numbers
"Prev" and "Next" buttons with boundary checks

3. Active Page Highlighting
Highlights the currently selected page using dynamic Tailwind classes (bg-blue-400 for active, bg-white for others).

4. Reusable Card Component
Uses a Card component to display each product with:
Thumbnail
Title

5. Responsive Design
Uses Tailwind's Flexbox utilities to ensure mobile and desktop responsiveness.
Cards are wrapped and spaced evenly.

___________________________________________________________________________________

üöÄ Future Improvements
üß† Functionality Enhancements
Loading State
Show a spinner or skeleton cards while fetching products.
Error Handling
Handle failed API calls with user-friendly error messages.
Disable Prev/Next
Disable "Prev" on the first page and "Next" on the last page to improve UX.

-> Search & Filter
Add a search bar and category filters using the API‚Äôs capabilities (/products/search?q=... or category=...).
Items Per Page Selector
Allow users to choose how many items to display per page (e.g., 10 / 20 / 50).
Scroll to Top on Page Change
Smooth scroll to top when the page is changed to improve navigation experience.

üé® UI Improvements
Hover and Active Effects
Add Tailwind transitions, hover effects, and button animations.
Dark Mode Support
Allow theme toggle using Tailwind‚Äôs dark mode utilities.
Better Card Design
Include more product details: price, description, rating, etc.
Implement debounce for live searching to reduce unnecessary API calls.

üåê Advanced Features (Stretch Goals)
Infinite Scrolling
Replace pagination with infinite scroll for smoother UX.
Favorites or Cart Integration
Add functionality to "favorite" or "add to cart" from each card.
Unit Testing

Add tests using React Testing Library and Jest.